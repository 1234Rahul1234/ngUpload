{"name":"ngUpload","tagline":"An AngularJS Service for uploading files using iframe","body":"# ngUpload\r\n\r\nAn AngularJS file upload directive.  \r\n\r\n## Update\r\n\r\nInstead of treating this as a service, I have converted ngUpload to \r\nan AngularJS Directive, this way you do not have to deal with id's when referencing the form element.  The only drawback is the requirement to use jQuery to normalize the pulling of iFrame contents on a completed response from the server.  \r\n\r\n## Requirements\r\n\r\n* AngularJS\r\n* JQuery\r\n\r\n## Usage\r\n\r\nAdd to your html file\r\n\r\n```\r\n<script src=\"/js/ng-upload.js\"></script>\r\n```\r\n\r\nCreate a basic form with a file input element\r\n\r\n``` html\r\n<div ng-app=\"app\">\r\n  <div ng-controller=\"mainCtrl\">\r\n   <form action=\"/uploads\" ng-upload=\"results()\"> \r\n     <input type=\"file\" name=\"avatar\"></input>\r\n     <input type=\"submit\" value=\"Upload\"></input>\r\n   </form>\r\n </div>\r\n</div>\r\n\r\n```\r\n\r\n``` js\r\nangular.module('app', ['ng-upload'])\r\n  .controller('mainCtrl', function($scope) {\r\n    $scope.results = function(content) {\r\n      console.log(content);\r\n    }  \r\n});\r\n```\r\n\r\n## Example\r\n\r\nsee `example` folder\r\n\r\n## License\r\n\r\nMIT\r\n\r\n## How to contribute\r\n\r\npull requests welcome.\r\n\r\n## Thanks\r\n\r\n* AngularJS Team\r\n* NodeJS Team\r\n* JavaScript Team","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}